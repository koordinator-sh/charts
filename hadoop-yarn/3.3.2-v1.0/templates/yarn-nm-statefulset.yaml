apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ .Values.installation.namespace }}
  name: {{ include "hadoop-yarn.fullname" . }}-nm
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/hadoop-configmap.yaml") . | sha256sum }}
  labels:
    app.kubernetes.io/name: {{ include "hadoop-yarn.name" . }}
    helm.sh/chart: {{ include "hadoop-yarn.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: node-manager
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "hadoop-yarn.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: node-manager
  minReadySeconds: 10
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 20%
  replicas: 2
  serviceName: {{ .Values.yarn.nodeManager.serviceName }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "hadoop-yarn.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: node-manager
{{- if .Values.yarn.nodeManager.useBatchResource }}
        koordinator.sh/qosClass: BE
{{- end }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: {{ include "hadoop-yarn.name" . }}
                  app.kubernetes.io/instance: {{ .Release.Name }}
                  app.kubernetes.io/component: node-manager
      serviceAccountName: yarn-nodemanager
      setHostnameAsFQDN: true
      terminationGracePeriodSeconds: 0
      dnsPolicy: ClusterFirst
{{- if .Values.yarn.nodeManager.useBatchResource }}
      priorityClassName: koord-batch
{{- end }}
      hostNetwork: false
      nodeSelector:
{{ toYaml .Values.yarn.nodeManager.nodeSelector | indent 8 }}
      containers:
      - name: yarn-nm
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:
           - "/bin/bash"
           - "/tmp/hadoop-config/bootstrap.sh"
           - "-d"
        resources:
{{- if .Values.yarn.nodeManager.useBatchResource }}
          requests:
            kubernetes.io/batch-cpu: {{ .Values.yarn.nodeManager.resources.requests.cpu }}k
            kubernetes.io/batch-memory: {{ .Values.yarn.nodeManager.resources.requests.memory }}
          limits:
            kubernetes.io/batch-cpu: {{ .Values.yarn.nodeManager.resources.limits.cpu }}k
            kubernetes.io/batch-memory: {{ .Values.yarn.nodeManager.resources.limits.memory }}
{{- else }}
          requests:
            cpu: {{ .Values.yarn.nodeManager.resources.requests.cpu }}
            memory: {{ .Values.yarn.nodeManager.resources.requests.memory }}
          limits:
            cpu: {{ .Values.yarn.nodeManager.resources.limits.cpu }}
            memory: {{ .Values.yarn.nodeManager.resources.limits.memory }}
{{- end }}
        readinessProbe:
          httpGet:
            path: /node
            port: 8042
          initialDelaySeconds: 10
          timeoutSeconds: 2
        securityContext:
          privileged: true
        livenessProbe:
          httpGet:
            path: /node
            port: 8042
          initialDelaySeconds: 10
          timeoutSeconds: 2
        env:
        - name: YARN_ROLE
          value: yarn-nm
        - name: NM_INIT_CPU_CORES
          value: "{{ .Values.yarn.nodeManager.initCPUVCores }}"
        - name: NM_INIT_MEMORY_MB
          value: "{{ .Values.yarn.nodeManager.initMemoryMB }}"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: hadoop-config
          mountPath: /tmp/hadoop-config
        - name: host-cgroup-root
          mountPath: /host-cgroup/
{{- if .Values.hdfs.enabled }}
      - name: hdfs-dn
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:
          - "/bin/bash"
          - "/tmp/hadoop-config/bootstrap.sh"
          - "-d"
        resources:
{{- if .Values.yarn.nodeManager.useBatchResource }}
          requests:
            kubernetes.io/batch-cpu: {{ .Values.hdfs.dataNode.resources.requests.cpu }}k
            kubernetes.io/batch-memory: {{ .Values.hdfs.dataNode.resources.requests.memory }}
          limits:
            kubernetes.io/batch-cpu: {{ .Values.hdfs.dataNode.resources.limits.cpu }}k
            kubernetes.io/batch-memory: {{ .Values.hdfs.dataNode.resources.limits.memory }}
{{- else }}
          requests:
            cpu: {{ .Values.hdfs.dataNode.resources.requests.cpu }}
            memory: {{ .Values.hdfs.dataNode.resources.requests.memory }}
          limits:
            cpu: {{ .Values.hdfs.dataNode.resources.limits.cpu }}
            memory: {{ .Values.hdfs.dataNode.resources.limits.memory }}
{{- end }}
        readinessProbe:
          httpGet:
            path: /
            port: 8042
          initialDelaySeconds: 10
          timeoutSeconds: 2
        securityContext:
          privileged: true
        livenessProbe:
          httpGet:
            path: /
            port: 9864
          initialDelaySeconds: 10
          timeoutSeconds: 2
        env:
          - name: YARN_ROLE
            value: hdfs-dn
        volumeMounts:
        - name: hadoop-config
          mountPath: /tmp/hadoop-config
{{- end }}
      volumes:
      - name: hadoop-config
        configMap:
          name: {{ include "hadoop-yarn.fullname" . }}
      - name: host-cgroup-root
        hostPath:
          # set k8s/besteffort for yarn task, mount root dir here since the format is different betweent cgroup fs and systemd
          path: /sys/fs/cgroup/
          type: ""